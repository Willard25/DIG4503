{"version":3,"sources":["components/LeaderBoard/index.js","components/FindName/SeasonStats/index.js","components/FindName/index.js","App.js","serviceWorker.js","index.js"],"names":["LeaderBoard","props","state","leader","second","fetch","then","res","json","result","data","included","setState","attributes","stats","className","this","name","rank","wins","kills","killDeathRatio","games","React","Component","SeasonStats","solostats","duostats","squadstats","sendid","gameModeStats","solo","duo","squad","findstats","losses","damageDealt","assists","revives","top10s","FindName","getValue","event","preventDefault","nameRef","current","value","active","playerid","err","createRef","id","onSubmit","type","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17d64824.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nclass LeaderBoard extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      leader: [],\r\n      second: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.pubg.com/shards/steam/leaderboards/division.bro.official.pc-2018-06/squad-fpp?page[number]=0\", {\r\n      \"headers\": {\r\n        \"Authorization\": \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkYzBiMzQzMC02MjZjLTAxMzgtMmFkMi0yNzM4NDc2M2UzNjgiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTg3MDgxODM4LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6IndpbGxhcmRtYXJsZXktIn0.6sGwzo59EiDE_AFEYYypAGmrEE2kRk0Gw6uT6iRgYzE\",\r\n        \"Accept\": \"application/json\"\r\n      }\r\n    })\r\n    .then((res) => res.json())\r\n    .then((result) => {\r\n      let data = result.included;\r\n      this.setState({\r\n        leader: data[0].attributes,\r\n        second: data[0].attributes.stats\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"statcard\">\r\n        <div className=\"lbtitle\">Steam Leaderboards</div>\r\n        <div>\r\n          <div className=\"lbstatsuser\">{this.state.leader.name} </div>\r\n          <span className=\"lbstats\"><b>Rank:</b> {this.state.leader.rank} </span>\r\n        </div>\r\n        <div>\r\n          <span className=\"lbstats\"><b>Wins:</b> {this.state.second.wins} </span>\r\n          <span className=\"lbstats\"><b>Kills:</b> {this.state.second.kills} </span>\r\n          <span className=\"lbstats\"><b>K/D:</b> {this.state.second.killDeathRatio} </span>\r\n          <span className=\"lbstats\"><b>Games:</b> {this.state.second.games} </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeaderBoard;","import React from 'react';\r\nimport './index.css';\r\n\r\nclass SeasonStats extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n     solostats:[],\r\n     duostats:[],\r\n     squadstats:[]\r\n    }\r\n  }\r\n\r\n  findstats (){\r\n    fetch(\"https://api.pubg.com/shards/steam/players/\" + this.props.sendid + \"/seasons/division.bro.official.pc-2018-06\", {\r\n      \"headers\": {\r\n        \"Authorization\": \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkYzBiMzQzMC02MjZjLTAxMzgtMmFkMi0yNzM4NDc2M2UzNjgiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTg3MDgxODM4LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6IndpbGxhcmRtYXJsZXktIn0.6sGwzo59EiDE_AFEYYypAGmrEE2kRk0Gw6uT6iRgYzE\",\r\n        \"Accept\": \"application/json\"\r\n      }\r\n    })\r\n    .then((res) => res.json())\r\n    .then((result) => {\r\n      this.setState({\r\n        solostats: result.data.attributes.gameModeStats.solo,\r\n        duostats: result.data.attributes.gameModeStats.duo,\r\n        squadstats: result.data.attributes.gameModeStats.squad,\r\n      })\r\n    })\r\n  }\r\n\r\n  componentDidUpdate () {\r\n    if(this.props.sendid == \"\") {\r\n      //do nothing\r\n    }else {\r\n      this.findstats();\r\n    }\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"seasoncard\">\r\n        <div className=\"seasontitle\">Season Stats</div>\r\n        <div className=\"statscard\">\r\n          <div className=\"stattitle\">Solo Stats</div>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Wins: </span><span className=\"number\">{this.state.solostats.wins}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Loses: </span><span className=\"number\">{this.state.solostats.losses}</span>\r\n            </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Damage: </span><span className=\"number\">{this.state.solostats.damageDealt}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Kills: </span><span className=\"number\">{this.state.solostats.kills}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Assists: </span><span className=\"number\">{this.state.solostats.assists}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Revives: </span><span className=\"number\">{this.state.solostats.revives}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Top 10s: </span><span className=\"number\">{this.state.solostats.top10s}</span>\r\n          </span>\r\n        </div>\r\n        <div className=\"statscard\">\r\n          <div className=\"stattitle\">Duo Stats</div>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Wins: </span><span className=\"number\">{this.state.duostats.wins}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Loses: </span><span className=\"number\">{this.state.duostats.losses}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Damage: </span><span className=\"number\">{this.state.duostats.damageDealt}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Kills: </span><span className=\"number\">{this.state.duostats.kills}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Assists: </span><span className=\"number\">{this.state.duostats.assists}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Revives: </span><span className=\"number\">{this.state.duostats.revives}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Top 10s: </span><span className=\"number\">{this.state.duostats.top10s}</span>\r\n          </span>\r\n        </div>\r\n        <div className=\"statscard\">\r\n          <div className=\"stattitle\">Squad Stats</div>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Wins: </span><span className=\"number\">{this.state.squadstats.wins}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Loses: </span><span className=\"number\">{this.state.squadstats.losses}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Damage: </span><span className=\"number\">{this.state.squadstats.damageDealt}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Kills: </span><span className=\"number\">{this.state.squadstats.kills}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Assists: </span><span className=\"number\">{this.state.squadstats.assists}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Revives: </span><span className=\"number\">{this.state.squadstats.revives}</span>\r\n          </span>\r\n          <span className=\"stats\">\r\n            <span className=\"stat\">Top 10s: </span><span className=\"number\">{this.state.squadstats.top10s}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeasonStats;","import React from 'react';\r\nimport SeasonStats from \"./SeasonStats/index.js\";\r\nimport './index.css';\r\n\r\nclass FindName extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      playerid: [],\r\n      err: \"\"\r\n    }; \r\n    this.nameRef= React.createRef();\r\n  }\r\n\r\n  active () {\r\n      fetch(\"https://api.pubg.com/shards/steam/players?filter[playerNames]=\" + this.nameRef.current.value, {\r\n      \"headers\": {\r\n        \"Authorization\": \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkYzBiMzQzMC02MjZjLTAxMzgtMmFkMi0yNzM4NDc2M2UzNjgiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTg3MDgxODM4LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6IndpbGxhcmRtYXJsZXktIn0.6sGwzo59EiDE_AFEYYypAGmrEE2kRk0Gw6uT6iRgYzE\",\r\n        \"Accept\": \"application/json\"\r\n      }\r\n    })\r\n    .then((res) => res.json())\r\n    .then((result) => {\r\n      if (result === {\"errors\": [{\"title\": \"Not Found\", \"detail\": \"No Players Found Matching Criteria\"}]}) {\r\n        this.setState({err: \"Player not found!\"})\r\n      }else {\r\n        let data = result.data;\r\n        this.setState({\r\n          playerid: data[0].id\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  getValue = (event) => {\r\n    event.preventDefault();\r\n    const name = this.nameRef.current.value;\r\n    this.setState({\"name\": name});\r\n    if(name === \"\") {\r\n      //do nothing\r\n    }else{\r\n      this.active();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"namesearch\">\r\n          <div className=\"formtext\">Search for Steam Usernames</div>\r\n          <form className=\"inputform\" onSubmit={this.getValue}>\r\n            <input className=\"inputbox\" type=\"text\" ref={this.nameRef} />\r\n            <button className=\"button\">SUBMIT</button>\r\n          </form>\r\n          <p>{this.state.err}</p>\r\n          <div className=\"user\">{this.state.name}</div>\r\n        </div>\r\n        <SeasonStats sendid = {this.state.playerid} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FindName;","import React from 'react';\nimport LeaderBoard from \"./components/LeaderBoard/index.js\";\nimport FindName from \"./components/FindName/index.js\";\n//import logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"titlecontainer\">\n          <div className=\"title\">Playerunknown's Battlegrounds</div>\n        </div>\n        <div className=\"lbcontainer\"><LeaderBoard /></div>\n        <div className=\"fncontainer\"><FindName /></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}